=========			CAHIER DES CHARGES			=========

Voici une première version d'un cahier des charges pour l'éditeur de texte
en ligne. Il y aura sûrement pas mal de points à préciser. Il est important
que nous voyions le plus souvent possible le résultat pour orienter le
développement. Dans l'idéal on aimerait que la version courante de l'éditeur
soit toujours en ligne quelque part et que l'on soit informé des évolutions
(je parle de l'éditeur lui-même, pas du code source) (voire plusieurs
versions, dans des configurations différentes).

Comme je le dis plus bas, nous préférons qu'il y ait moins de fonctionnalités
mais qu'elles soient bien implémentées (de manière modulaire pour permettre
des extensions facilement et en réfléchissant beaucoup à l'ergonomie de
l'interface).

Quelques conseils :
Prenez un peu de temps pour réfléchir à la structure de l'application.
Qu'est-ce qui doit s'exécuter côté client ou serveur ?
Quelles sont les URLs de votre site ?
etc.
On peut discuter ces choix si vous le souhaitez.

Regardez l'éditeur d'OClosure (enfin de Google Closure).
Il est possible qu'il soit suffisamment souple pour pouvoir être réutilisé
sans modifier le code. Cela vous éviterait beaucoup de travail.

Enfin le but du projet est aussi d'avoir un retour sur l'utilisation
d'Eliom et de js_of_ocaml. N'hésitez pas à mettre des tickets sur le
site http://ocsigen.org/trac si quelque chose fonctionne mal ou à
poser des questions sur IRC ou dev@ocsigen.org, ou la liste (si ça
concerne tout le monde).

Éditeur de texte client/server avec Ocsigen
-------------------------------------------

But : écrire un éditeur de texte en ligne permettant de collaborer à plusieurs
sur un projet (logiciel ou pas) composé de plusieurs fichiers textes.

Fonctionnalités de base :
- édition d'un texte dans un navigateur
- Création ou ouverture d'un fichier (stocké côté serveur), puis sauvegarde
(toujours côté serveur).
- Connexion d'utilisateurs. Implémentez un modèle basique et bien séparé
du reste pour que l'on puisse facilement le remplacer par un autre. (mieux :
faire un truc modulaire qui permet de s'adapter à n'importe quel modèle de
droit et d'utilisateurs).
- Gérer les éditions concurrentes sur les mêmes fichiers. Dans un premier,
temps on peut empêcher qqun de modifier un fichier si quelqu'un l'a déjà
ouvert (ou évenutellement permettre de "voler" le lock à qqun d'autre comme
dans emacs, pour éviter que quelque qui ne s'est pas déconnecté empêche tout
le monde d'écrire).
- Téléchargement des fichiers
- Visualisation des fichiers (avec possibilité de passer très facilement
en mode édition)

Une fois ces fonctionnalités de base implémentées, pleinement utilisables,
et programmées de manière ergonomique, nous aimerions les extensions
suivantes :

* Organisation des fichiers en projets

* Fonctionnalités évoluées d'édition de code
Permettre de programmer des modes d'édition en OCaml, par exemple
avec coloration syntaxique et indentation.

* Mode wysiwyg avec des boutons titre/liste/section etc.
(et gras/italique, etc.). L'idéal serait de pouvoir avoir plusieurs formats de
sauvegarde (par exemple notre syntaxe wiki).

Nous souhaitons avant tout avoir un code très bien écrit, très modulaire et
réutilisable. Dans l'idéal, on devrait pouvoir utiliser seulement les parties
dont on a besoin pour inclure un éditeur de texte sur son site. Par exemple
on n'a pas forcément besoin d'un éditeur multi-fichier, ou bien on ne souhaite
pas faire de la sauvegarde côté serveur...

Nous aimerions aussi un travail sur l'ergonomie de l'application. Proposer
des outils pour simplifier le travail de l'utilisateur, par exemple
pour savoir si un fichier est en cours d'édition et par qui. Faites
attention au temps de latence si vous faites certaines tâches sur le
serveur.

Si tout ceci fonctionne bien, il y a plein de façon d'étendre le projet. On
peut même imaginer une solution complète d'hébergement de projets avec éditeur
en ligne (un mélange entre github et Eclipse). Quelques pistes :

* Réfléchir à l'utilisation de git côté serveur pour sauvegarder les
modifications de chacun en utilisant des branches différentes. Chacun
travaille sur son code et on peut ensuite soumettre ses modifications
dans la branche principale après résolution des conflits.

* Réfléchir à des solutions pour l'édition concurrente d'un même fichier.
Ça ne doit pas être le mode par défaut pour la programmation. (On préfère
travailler chacun sur sa branche, pour pouvoir compiler, et ensuite
soumettre ("committer") son travail dans la branche principale).
Mais pour un travail wysiwyg, ça peut se justifier.

* On peut imaginer aussi de compiler le projet à distance (même sur
plusieurs plateformes) et de le tester en ligne (par exemple s'il
s'agit d'un projet Ocsigen), voire carrément gérer la diffusion sur
des plateformes style Android market ou Apple store.
